<?php

/**
 * BaseAlAms
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $alcheck_analysis_id
 * @property integer $al_ams_std_id
 * @property date $date
 * @property string $ams_sample_name
 * @property string $caams_num
 * @property float $r_to_rstd
 * @property float $interror
 * @property float $exterror
 * @property float $truefrac
 * @property string $notes
 * @property AlcheckAnalysis $AlcheckAnalysis
 * @property AlAmsStd $AlAmsStd
 * @property Doctrine_Collection $AmsCurrent
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class BaseAlAms extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('al_ams');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => '1',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('alcheck_analysis_id', 'integer', 3, array(
             'type' => 'integer',
             'unsigned' => '1',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '3',
             ));
        $this->hasColumn('al_ams_std_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => '1',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('ams_sample_name', 'string', 160, array(
             'type' => 'string',
             'fixed' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '160',
             ));
        $this->hasColumn('caams_num', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '60',
             ));
        $this->hasColumn('r_to_rstd', 'float', 2147483647, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '2147483647',
             ));
        $this->hasColumn('interror', 'float', 2147483647, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '2147483647',
             ));
        $this->hasColumn('exterror', 'float', 2147483647, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '2147483647',
             ));
        $this->hasColumn('truefrac', 'float', 2147483647, array(
             'type' => 'float',
             'unsigned' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '2147483647',
             ));
        $this->hasColumn('notes', 'string', 2147483647, array(
             'type' => 'string',
             'fixed' => 0,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '2147483647',
             ));
    }

    public function setUp()
    {
        $this->hasOne('AlcheckAnalysis', array(
             'local' => 'alcheck_analysis_id',
             'foreign' => 'id'));

        $this->hasOne('AlAmsStd', array(
             'local' => 'al_ams_std_id',
             'foreign' => 'id'));

        $this->hasMany('AmsCurrent', array(
             'local' => 'id',
             'foreign' => 'al_ams_id'));
    }
}