<?php

/**
 * Batch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5441 2009-01-30 22:58:43Z jwage $
 */
class Batch extends BaseBatch
{
    /**
     * Creates splits and runs for all the analyses in the batch if none exist yet.
     * 
     * @return bool true if changes were made to the object
     */
    public function initializeSplitsRuns()
    {
        $changes = false;
        $nanalyses = $this->Analysis->count();
        for ($a = 0; $a < $nanalyses; $a++) {
            $nsplits = $this->Analysis[$a]->Split->count();
            if ($nsplits == 0) {
                // no splits in db, add the splits and their icp runs too
                for ($s = 1; $s <= 2; $s++) {
                     $newsplit = new Split();
                     $newsplit->split_num = $s;
                     for ($r = 1; $r <= 2; $r++) {
                         $newrun = new IcpRun();
                         $newrun->run_num = $r;
                         $newsplit->IcpRun[] = $newrun;
                     } // run loop
                     $this->Analysis[$a]->Split[] = $newsplit;
                } // split loop
                $changes = true;
            }
        } // analysis loop
        
        return $changes;
    }
    
    /**
     * Creates text for input boxes on the ICP results page.
     *
     * @return array of generated aluminum text, beryllium text, and the number of rows in the text
     **/
    public function generateIcpResultsText()
    {   
        $al_text = '';
        $be_text = '';
        $nrows = 0;
        foreach ($this['Analysis'] as $a) {
            foreach ($a['Split'] as $s) {
                $bkr_text = "\n" . $s['SplitBkr']['bkr_number'];
                $al_text .= $bkr_text;
                $be_text .= $bkr_text;
                foreach ($s['IcpRun'] as $r) {
                    $al_text .= ' ' . $r['al_result'];
                    $be_text .= ' ' . $r['be_result'];
                }
                ++$nrows;
            }
        }
        
        return array($al_text, $be_text, $nrows);        
    }
    
    /**
     * Inserts ICP results into database.
     *
     * @param array @al_arr Al ICP results
     * @param array @be_arr Be ICP results
     * @return void boolean true if successful, false if insert failed
     **/
    public function &setIcpResults($al_arr, $be_arr)
    {
        $al_count = count($al_arr);
        $be_count = count($be_arr);
        
        // change the batch
        foreach ($this->Analysis as &$a) {
            foreach ($a->Split as &$s) {
                $bkr_num = $s->SplitBkr->bkr_number;
                $nRunsDb = $s->IcpRun->count();
                $nRuns = count($al_arr[$bkr_num]);
                
                // what if a run was removed by the user
                if ($nRunsDb > $nRuns) {
                    $nDeleted = Doctrine::getTable('IcpRun')->removeExcessRuns($s, $nRuns);
                    // update $nRunsDb to new value
                    $nRunsDb = $nRuns;
                    $this->refreshRelated();
                }
                
                for ($r = 0; $r < $nRuns; $r++) {
                    if ($r >= $nRunsDb) {
                        $newRun = new IcpRun();
                        $newRun->run_num = $r + 1;
                        $s->IcpRun[] = $newRun;
                    }
                    if (isset($al_arr[$bkr_num][$r])) {
                        $s->IcpRun[$r]->al_result = $al_arr[$bkr_num][$r];
                        $s->IcpRun[$r]->use_al = 'y';
                    }
                    if (isset($be_arr[$bkr_num][$r])) {
                        $s->IcpRun[$r]->be_result = $be_arr[$bkr_num][$r];
                        $s->IcpRun[$r]->use_be = 'y';
                    }
                }
            }
        }
        
        return $this;
    }
    
    /**
     * @param array $use_be array containing run id values for Be ICP results deemed OK
     * @param array $use_al array containing run id values for Al ICP results deemed OK
     * @return Batch reference to this batch object
     */
    public function &setIcpOKs(&$use_be, &$use_al)
    {
        if ( !is_array($use_be) || !is_array($use_al)) {
            throw new InvalidArgumentException('Both arguments must be arrays.');
        }
        
        foreach ($this->Analysis as &$an) {
            foreach ($an->Split as &$sp) {
                foreach ($sp->IcpRun as &$run) {
                    
                    if (in_array($run->id, $use_be)) {
                        $run->use_be = 'y';
                    } else {
                        $run->use_be = 'n';
                    }
                    
                    if (in_array($run->id, $use_al)) {
                        $run->use_al = 'y';
                    } else {
                        $run->use_al = 'n';
                    }
                    
                }
            }
        }
        
        return $this;
    }
}